<?php

/**
 * This module provides SSO functionality for gluu Server.
 *
 * @author DITF
 * @modified MEKIT(mekit.it) - 2018-02-08
 *
 * PROFILE URL: https://tcblsso.ilabt.iminds.be/usermanager/user/info?
 *
 */

function gluuSSO_menu() {
  $items = [];
  $items['user/gluuSSO'] = [
    'title' => 'Log in with TCBL',
    'page callback' => 'gluuSSO_loginSSO',
    'access callback' => 'gluuSSO_is_authorized',
    'type' => MENU_LOCAL_TASK,
  ];
  return $items;
}



/**
 * @return int
 * @throws \Exception
 */
function gluuSSO_loginSSO() {
  module_load_include('php', 'gluuSSO', 'lib/Crypt/RSA');
  module_load_include('php', 'gluuSSO', 'lib/Math/BigInteger');
  module_load_include('php', 'gluuSSO', 'lib/OpenIDConnectClient');

  define('A_UUID_INUM', '9fce9516-baf2-11e6-b12a-b68472af1a70');
  define("ISSUER", 'https://tcblsso.ilabt.iminds.be');
  define("URL_REDIRECT", 'https://tcbl.dev.mekit.it/user/gluuSSO');
  define("CLIENT_ID", "@!94C6.B1CD.FACE.39C5!0001!6872.82DF!0008!8E3C.FAC0.9AEE.0A2F");
  define("CLIENT_SECRET", "752e0b97-853b-47f0-a87d-bc15b8487339");


  $client = new OpenIDConnectClient(
    ISSUER,
    CLIENT_ID,
    CLIENT_SECRET
  );

  $client->setRedirectURL(URL_REDIRECT);

  $prompt = ['prompt' => 'consent', 'display' => 'page'];
  $client->addAuthParam($prompt);

  # Add desired scopes. The 'openid' scope is mandatory!
  $client->addScope('openid');
  $client->addScope('minimum');
  $client->addScope('extended');//for user avatar

  # Actual authentication and authorization
  try {
    $client->authenticate();
  } catch(\OpenIDConnectClientException $e) {
    $error_number = 1;
    $error_message = t("Login isn't allowed via TCBL due missing or denied permission.");
    drupal_set_message($error_message, "error");
    watchdog(
      "GLUU-SSO", $error_message, [
      "error_number" => $error_number,
      "exception" => $e
    ], WATCHDOG_ALERT
    );
    drupal_goto('<front>');
    return $error_number;
  }

  # Request user info.
  $firstname = $client->requestUserInfo('given_name');
  $lastname = $client->requestUserInfo('family_name');
  $email = $client->requestUserInfo('email');
  $inum = $client->requestUserInfo('sub');
  $avatar = $client->requestUserInfo('extended_picture_url');
  $name = $firstname . ' ' . $lastname;

  if (!$email) {
    $error_number = 2;
    $error_message = t("Unable to get e-mail address for user identification.");
    drupal_set_message($error_message, "error");
    watchdog("GLUU-SSO", $error_message, ["error_number" => $error_number], WATCHDOG_ALERT);
    drupal_goto('<front>');
    return $error_number;
  }

  # Load drupal account
  /** @var \DatabaseStatementInterface $query */
  $query = db_select('users', 'u')
    ->fields('u', ['uid', 'mail'])
    ->condition('mail', $email, 'LIKE')
    ->execute();
  $account = $query->fetchAssoc();

  # -------------------------------------------------------------Create account
  if (!$account) {

    $account_data = [
      'name' => $email,
      'mail' => $email,
      'pass' => user_password(32),
      'status' => 1,
      'init' => $email,
      'roles' => ['6' => 'gluu-user'],
      'field_firstname' => [
        LANGUAGE_NONE => [
          0 => [
            'value' => $firstname,
          ],
        ],
      ],
      'field_lastname' => [
        LANGUAGE_NONE => [
          0 => [
            'value' => $lastname,
          ],
        ],
      ],
    ];

    $user = user_save('', $account_data);
    $account = [
      'uid' => $user->uid,
      'mail' => $user->mail,
    ];

    # Newsletter hinzufÃ¼gen
    $snid = db_insert('simplenews_subscriber')
      ->fields(
        [
          'activated' => '1',
          'mail' => $email,
          'uid' => $account['uid'],
          'changes' => 'a:0:{}',
          'created' => REQUEST_TIME,
        ]
      )
      ->execute();

    db_insert('simplenews_subscription')
      ->fields(
        [
          'snid' => $snid,
          'tid' => '23',
          'status' => '1',
          'timestamp' => REQUEST_TIME,
          'source' => 'website',
        ]
      )
      ->execute();
  }


  # --------------------------------------------------------------------Login
  if ($account['uid'] != 1) {
    $user = user_load($account['uid']);
    $info = [
      '%user' => $user->name,
      '%name' => $name,
      '%email' => $email,
      '%inum' => $inum,
    ];
    watchdog('gluu-sso', 'Session opened for %user (Gluu-Information: %name|%email|%inum) via TCBL login.', $info);

    //update user avatar
    echo("<br />user:" . print_r($user, TRUE));

    user_save(
      $user, [
             'field_firstname' => [
               LANGUAGE_NONE => [
                 0 => [
                   'value' => $firstname,
                 ],
               ],
             ],
             'field_lastname' => [
               LANGUAGE_NONE => [
                 0 => [
                   'value' => $lastname,
                 ],
               ],
             ],
             'field_sso_avatar_uri' => [
               LANGUAGE_NONE => [
                 0 => [
                   'value' => $avatar,
                 ],
               ],
             ],
           ]
    );

    user_login_submit([], $account);
    drupal_session_regenerate();
  } else {
    drupal_set_message("This user isn't allowed to login via gluu, due security reasons.", "error");
  }


  drupal_goto('<front>');
  //echo('<br/><a href="/user/gluuSSO">again</a>');
  return 1;
}


/**
 * @return bool
 */
function gluuSSO_is_authorized() {
  return user_is_anonymous();
  //return TRUE;
}
