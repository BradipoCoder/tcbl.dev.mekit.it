<?php

require('include/data.php');
require('include/query.php');

function tcbl_comps_menu() {
  $items['comps-get-results'] = array(
    'title' => 'Labs query results',
    'page callback' => 'tcbl_comps_get_results_page',
    'access callback' => true,
  );
  $items['comps-get-data'] = array(
    'title' => 'Labs query results',
    'page callback' => 'tcbl_comps_get_data',
    'access callback' => true,
  );
  $items['comps-get-nids'] = array(
    'title' => 'Labs query nids',
    'page callback' => 'tcbl_comps_get_nids',
    'access callback' => true,
  );

  $items['dashboard'] = array(
    'title' => 'Dashboard',
    'page callback' => 'tcbl_comps_dashboard',
    'access callback' => '_tcbl_comps_dashboard_access',
  );
  return $items;
}

/**
 * Result page for ajax load function
 */
function tcbl_comps_get_results_page() {
  $filters = $_GET;
  unset($filters['q']);

  $view_mode = 'teaser';
  if (isset($filters['view_mode'])){
    $view_mode = $filters['view_mode'];
    unset($filters['view_mode']);
  }

  $nids = _tcbl_comps_query_nids($filters);
  $build['nodes'] = _tcbl_comps_get_nodes($nids, $view_mode);
  return $build;
}

function tcbl_comps_get_data(){
  $filters = $_GET;
  unset($filters['q']);
  $nids = _tcbl_comps_query_nids($filters);
  $data = _tcbl_comps_get_maps_data($nids);
  return drupal_json_output($data);
}

function tcbl_comps_get_nids(){
  $filters = $_GET;
  unset($filters['q']);
  $nids = _tcbl_comps_query_nids($filters);
  return drupal_json_output($nids); 
}

/**
 * Implementes hook_theme();
 */
function tcbl_comps_theme(){
  return array(
    'tcbl_comps_main' => array(
      // use a template and give the template's name.
      'template' => 'tcbl-comps-main',
      'variables' => array(
        'content' => NULL,
        'data' => NULL,
        'aid' => NULL,
      ),
      'pattern' => 'tcbl-comps-main__',
    ),
    'tcbl_comps_noresults' => array(
      // use a template and give the template's name.
      'template' => 'tcbl-comps-noresults',
      'variables' => array(
        'content' => NULL,
      ),
      'pattern' => 'tcbl-comps-noresults__',
    ),
    'tcbl_comps_dashboard' => array(
      'template' => 'tcbl-comps-dashboard',
      'variables' => array(
        'content' => NULL,
      ),
      'pattern' => 'tcbl-comps-dashboard__',
    ),
  );
}

/**
 * Add usefull javascript libraries
 * @param  [type] &$vars [description]
 * @return [type]        [description]
 */
function template_preprocess_tcbl_comps_main(&$vars){
  $js = libraries_get_path('cookie') . '/js.cookie.min.js';
  drupal_add_js( $js , array('group' => JS_LIBRARY, 'weight' => 1));

  $js = libraries_get_path('jquery.simplepagination') . '/jquery.simplePagination.js';
  drupal_add_js( $js , array('group' => JS_LIBRARY, 'weight' => 1));

  $js = drupal_get_path('module', 'tcbl_comps') . '/js/tcbl-comps.js';
  drupal_add_js( $js , array('group' => JS_LIBRARY, 'weight' => 1));

  if (user_access('access contextual links')){
    drupal_add_library('contextual', 'contextual-links');  
  }

  drupal_add_js(array(
    'tcbl_comps' => $vars['data'],
  ), array('type' => 'setting'));
}

// ** ----- PREPROCES NODES----- **
// --------------------------------

/**
 * Implements hook_preprocess_node();
 */
function tcbl_comps_preprocess_node(&$vars){
  $node = $vars['node'];

  if ($node->nid == 441 && $vars['view_mode'] == 'full'){
    _tcbl_comps_pre_labs_node($vars);
  }

  if ($node->nid == 486 && $vars['view_mode'] == 'full'){
    _tcbl_comps_pre_directory_node($vars);
  }

  if ($node->nid == 483 && $vars['view_mode'] == 'full'){
    _tcbl_comps_pre_join_tcbl_lab($vars);
  }
}

/**
 * Preprocess Labs Page to add Labs archive
 */
function _tcbl_comps_pre_labs_node(&$vars){
  $node = $vars['node'];

  // Add parallax cover
  $vars['img_url'] = false;
  if (isset($node->field_image['und'][0]['uri'])){
    $uri = $node->field_image['und'][0]['uri'];
    $url_img = file_create_url($uri);  
    $vars['img_url'] = $url_img;

    $js_parallax = libraries_get_path('jquery.parallax') . '/jquery.parallax.min.js';
    drupal_add_js( $js_parallax , array('group' => JS_LIBRARY, 'weight' => 1));
  }

  $data['perPage'] = 8;

  // If an argument is present, cookie data need to by refreshed
  $data['withArgs'] = false;
  if (isset($_GET['country'])){
    $data['withArgs'] = true;
  }

  $data['scroll'] = false;
  if (isset($_GET['scroll'])){
    $data['scroll'] = true;
  }

  // Default filters
  $data['filters'] = array(
    'memb' => 28, // Only labs
  );

  // Archive id (for cookies)
  $data['id'] = 'labs';
  $data['scrollToElement'] = '#row-labs-archive';

  // Add comps archive
  $vars['content']['archive'] = array(
    '#theme' => 'tcbl_comps_main',
    '#content' => _tcbl_comps_build_archive($data['filters']),
    '#data' => $data,
    '#aid' => $data['id'],
  ); 
}

/**
 * Preprocess Directory Page to add Directory archive
 */
function _tcbl_comps_pre_directory_node(&$vars){
  $node = $vars['node'];

  $data['perPage'] = 8;

  // If an argument is present, cookie data need to by refreshed
  $data['withArgs'] = false;
  if (isset($_GET['country'])){
    $data['withArgs'] = true;
  }

  $data['scroll'] = false;
  if (isset($_GET['scroll'])){
    $data['scroll'] = true;
  }

  // Default filters
  $data['filters'] = array(
    'memb' => 'all',
  );

  // Archive id (for cookies)
  $data['id'] = 'directory';
  $data['scrollToElement'] = '.wrapper-header';

  // Add comps archive
  $vars['content']['archive'] = array(
    '#theme' => 'tcbl_comps_main',
    '#content' => _tcbl_comps_build_archive($data['filters']),
    '#data' => $data,
    '#aid' => $data['id'],
  ); 
}

function _tcbl_comps_pre_join_tcbl_lab(&$vars){
  $formNode = node_load(515);
  $build = node_view($formNode, 'default');
  $vars['content']['webform'] = $build['webform'];
}

/**
 * Build comps archive with map and list
 */
function _tcbl_comps_build_archive($filters){
  $data['list'] = false;
  
  // All nids for filters
  $all_nids = _tcbl_comps_query_nids($filters);

  // Filters
  $build['filters'] = _tcbl_comps_get_filters($all_nids);

  $build['map'] = array(
    '#theme' => 'tcbl_map',
    '#data' => $data,
    '#multiple' => true,
  );

  return $build;
}

// ** ----- UPDATING NODES -----
// -----------------------------

function tcbl_comps_node_presave($node){
  if ($node->type == 'company' || $node->type == 'project'){
    _tcbl_comps_update_owners($node);
  }
}

/**
 * Update the owners of the company and projects
 * @param  class   $node     : node object
 * @param  boolean $nodesave : force the node saving
 */
function _tcbl_comps_update_owners($node, $nodesave = false){
  if (isset($node->field_ref_user['und'][0]['target_id'])){
    $uid = $node->field_ref_user['und'][0]['target_id'];

    // Change the author of the company node
    $node->uid = $uid;

    // By default the node will be saved
    if ($nodesave){
      node_save($node);
    }
    
    // Change the author of the projects
    // if (isset($node->field_ref_projects['und'][0])){
    //   $projects = $node->field_ref_projects['und'];
    //   foreach ($projects as $key => $item) {
    //     $nid = $item['target_id'];
    //     $project = node_load($nid);
    //     $project->uid = $uid;
    //     node_save($project);
    //   }
    // }
  }
}

/**
 * Usefull function to update all company owners
 * @return [type] [description]
 */
function _tcbl_comps_update_all_owners(){
  $nids = _tcbl_comps_load_all_comps();
  $nodes = node_load_multiple($nids);
  foreach ($nodes as $key => $node) {
    _tcbl_comps_update_owners($node, true);
    drupal_set_message($node->title . ' updated');  
  }
}

function _tcbl_comps_load_all_comps(){
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', array('company'));

  $query->execute();
  if (isset($query->ordered_results)){
    $results = $query->ordered_results;
    $nids = [];
    foreach ( $results as $node ) {
      array_push($nids, $node->entity_id );
    }
   
    if (count($nids)){
      return $nids;
    }
  } else {
    return false;
  }
}


// ** ----- DASHBOARD -----
// ------------------------

function tcbl_comps_dashboard(){

  $content['title']['#markup'] = '<h2>My dashboard</h2>';

  global $user;
  $uid = $user->uid;

  $comp_nids = _tcbl_comps_user_get_nodes($uid, 'company');
  if ($comp_nids) {
    $comps = node_load_multiple($comp_nids);
    $content['comps'] = node_view_multiple($comps, 'teaser');
  }

  $project_nids = _tcbl_comps_user_get_nodes($uid, 'project');
  if ($project_nids) {
    $projects = node_load_multiple($project_nids);
    $content['projects'] = node_view_multiple($projects, 'child');
  }

  $build = array(
    '#theme' => 'tcbl_comps_dashboard',
    '#content' => $content,
  );

  return $build;
}

function _tcbl_comps_dashboard_access(){
  global $user;
  $roles = $user->roles;

  // Administrator
  // if (isset($roles[3])){
  //   return true;
  // }

  if (isset($roles[8])){
    $own_nodes = _tcbl_comps_user_own_nodes($user->uid);
    return $own_nodes;
  }

  return false;
}

function _tcbl_comps_user_own_nodes($uid){
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', array('company', 'project'))
    ->propertyCondition('uid', $uid);

  $query->execute();
  if (isset($query->ordered_results)){
    $results = $query->ordered_results;
    return true;
  } else {
    return false;
  }
}

function _tcbl_comps_user_get_nodes($uid, $type){
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', array($type))
    ->propertyCondition('uid', $uid);

  $query->execute();
  if (isset($query->ordered_results)){
    $results = $query->ordered_results;
    $nids = [];
    foreach ( $results as $node ) {
      array_push($nids, $node->entity_id );
    }
   
    if (count($nids)){
      return $nids;
    }
  } else {
    return false;
  }
}

function tcbl_comps_custom_theme() {
  global $user;
  if ($user->uid == 1){
    if (current_path() == 'system/ajax') {
      return variable_get('admin_theme');
    }  
  }
}


