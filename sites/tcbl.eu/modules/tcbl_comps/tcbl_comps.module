<?php

require('include/data.php');
require('include/query.php');
require('include/dashboard.php');
require('include/evaluation.php');

function tcbl_comps_menu() {
  $items['comps-get-results'] = array(
    'title' => 'Labs query results',
    'page callback' => 'tcbl_comps_get_results_page',
    'access callback' => true,
  );
  $items['comps-get-data'] = array(
    'title' => 'Labs query results',
    'page callback' => 'tcbl_comps_get_data',
    'access callback' => true,
  );
  $items['comps-get-nids'] = array(
    'title' => 'Labs query nids',
    'page callback' => 'tcbl_comps_get_nids',
    'access callback' => true,
  );

  $items['dashboard'] = array(
    'title' => 'Dashboard',
    'page callback' => 'tcbl_comps_dashboard',
    'access callback' => '_tcbl_comps_dashboard_access',
  );

  $items['comps-dev'] = array(
    'title' => 'Dev Stuff for Companies',
    'page callback' => 'tcbl_comps_dev',
    'access callback' => user_access('access devel information'),
  );

  $items['labs-eval/%'] = array(
    'title' => 'Lab evaluation',
    'page callback' => 'tcbl_lab_evalution_page',
    'access callback' => 'tcbl_lab_evalution_page_access',
    'page arguments' => array(
      1,
    ),
  ); 

  $items['labs-eval-end/%/%/%'] = array(
    'title' => 'Lab evaluation',
    'page callback' => 'tcbl_lab_evalution_page_end',
    'access callback' => 'tcbl_lab_evalution_page_access',
    'page arguments' => array(
      1, 2, 3
    ),
  );

  $items['lab/%/approve/%'] = array(
    'title' => 'Lab evaluation',
    'page callback' => 'tcbl_lab_evalution_approve_page',
    'access callback' => 'tcbl_lab_evalution_page_access',
    'page arguments' => array(
      1, 3
    ),
  );

  $items['lab/%/approve/%/confirm'] = array(
    'title' => 'Lab evaluation',
    'page callback' => 'tcbl_lab_evalution_approve_confirm_page',
    'access callback' => 'tcbl_lab_evalution_page_access',
    'page arguments' => array(
      1, 3
    ),
  );

  return $items;
}

/**
 * Result page for ajax load function
 */
function tcbl_comps_get_results_page() {
  $filters = $_GET;
  unset($filters['q']);

  $view_mode = 'teaser';
  if (isset($filters['view_mode'])){
    $view_mode = $filters['view_mode'];
    unset($filters['view_mode']);
  }

  $nids = _tcbl_comps_query_nids($filters);
  $build['nodes'] = _tcbl_comps_get_nodes($nids, $view_mode);
  return $build;
}

function tcbl_comps_get_data(){
  $filters = $_GET;
  unset($filters['q']);
  $nids = _tcbl_comps_query_nids($filters);
  $data = _tcbl_comps_get_maps_data($nids);
  return drupal_json_output($data);
}

function tcbl_comps_get_nids(){
  $filters = $_GET;
  unset($filters['q']);
  $nids = _tcbl_comps_query_nids($filters);
  return drupal_json_output($nids); 
}

/**
 * Implementes hook_theme();
 */
function tcbl_comps_theme(){
  return array(
    'tcbl_comps_main' => array(
      // use a template and give the template's name.
      'template' => 'tcbl-comps-main',
      'variables' => array(
        'content' => NULL,
        'data' => NULL,
        'aid' => NULL,
      ),
      'pattern' => 'tcbl-comps-main__',
    ),
    'tcbl_comps_noresults' => array(
      // use a template and give the template's name.
      'template' => 'tcbl-comps-noresults',
      'variables' => array(
        'content' => NULL,
      ),
      'pattern' => 'tcbl-comps-noresults__',
    ),
    'tcbl_comps_dashboard' => array(
      'template' => 'tcbl-comps-dashboard',
      'variables' => array(
        'content' => NULL,
      ),
      'pattern' => 'tcbl-comps-dashboard__',
    ),
    'directory_number' => array(
      'template' => 'directory-number',
      'variables' => array(
        'number' => NULL,
        'label' => NULL,
      ),
      'pattern' => 'directory-number__',
    ),
    'tcbl_lab_evaluation' => array(
      'template' => 'tcbl-lab-evaluation',
      'variables' => array(
        'content' => NULL,
      ),
      'pattern' => 'tcbl-lab-evaluation__',  
    ),
    'tcbl_lab_evaluation_end' => array(
      'template' => 'tcbl-lab-evaluation-end',
      'variables' => array(
        'content' => NULL,
      ),
      'pattern' => 'tcbl-lab-evaluation-end__',  
    ),
    'tcbl_lab_approve' => array(
      'template' => 'tcbl-lab-approve',
      'variables' => array(
        'content' => NULL,
        'status' => NULL,
      ),
      'pattern' => 'tcbl-lab-approve__',  
    ),
    'tcbl_lab_status' => array(
      'template' => 'tcbl-lab-status',
      'variables' => array(
        'content' => NULL,
        'status' => NULL,
      ),
      'pattern' => 'tcbl-lab-status__',    
    ),
  );
}

/**
 * Add usefull javascript libraries
 * @param  [type] &$vars [description]
 * @return [type]        [description]
 */
function template_preprocess_tcbl_comps_main(&$vars){
  $js = libraries_get_path('cookie') . '/js.cookie.min.js';
  drupal_add_js( $js , array('group' => JS_LIBRARY, 'weight' => 1));

  $js = libraries_get_path('jquery.simplepagination') . '/jquery.simplePagination.js';
  drupal_add_js( $js , array('group' => JS_LIBRARY, 'weight' => 1));

  $js = drupal_get_path('module', 'tcbl_comps') . '/js/tcbl-comps.js';
  drupal_add_js( $js , array('group' => JS_LIBRARY, 'weight' => 1));

  if (user_access('access contextual links')){
    drupal_add_library('contextual', 'contextual-links');  
  }

  drupal_add_js(array(
    'tcbl_comps' => $vars['data'],
  ), array('type' => 'setting'));
}

// ** ----- PREPROCES NODES----- **
// --------------------------------

/**
 * Implements hook_preprocess_node();
 */
function tcbl_comps_preprocess_node(&$vars){
  $node = $vars['node'];

  if ($node->nid == 441 && $vars['view_mode'] == 'full'){
    _tcbl_comps_pre_labs_node($vars);
  }

  if ($node->nid == 486 && $vars['view_mode'] == 'full'){
    _tcbl_comps_pre_directory_node($vars);
  }

  if ($node->nid == 483 && $vars['view_mode'] == 'full'){
    _tcbl_comps_pre_join_tcbl_lab($vars);
  }
}

/**
 * Preprocess Labs Page to add Labs archive
 */
function _tcbl_comps_pre_labs_node(&$vars){
  $node = $vars['node'];

  // Add parallax cover
  $vars['img_url'] = false;
  if (isset($node->field_image['und'][0]['uri'])){
    $uri = $node->field_image['und'][0]['uri'];
    $url_img = file_create_url($uri);  
    $vars['img_url'] = $url_img;

    $js_parallax = libraries_get_path('jquery.parallax') . '/jquery.parallax.min.js';
    drupal_add_js( $js_parallax , array('group' => JS_LIBRARY, 'weight' => 1));
  }

  $data['perPage'] = 8;

  // If an argument is present, cookie data need to by refreshed
  $data['withArgs'] = false;
  if (isset($_GET['country'])){
    $data['withArgs'] = true;
  }

  $data['scroll'] = false;
  if (isset($_GET['scroll'])){
    $data['scroll'] = true;
  }

  // Default filters
  $data['filters'] = array(
    'memb' => 28, // Only labs
  );

  // Archive id (for cookies)
  $data['id'] = 'labs';
  $data['scrollToElement'] = '#row-labs-archive';

  // Add comps archive
  $vars['content']['archive'] = array(
    '#theme' => 'tcbl_comps_main',
    '#content' => _tcbl_comps_build_archive($data['filters']),
    '#data' => $data,
    '#aid' => $data['id'],
  ); 
}

/**
 * Preprocess Directory Page to add Directory archive
 */
function _tcbl_comps_pre_directory_node(&$vars){
  $node = $vars['node'];

  // Add parallax cover
  $vars['img_url'] = false;
  if (isset($node->field_image['und'][0]['uri'])){
    $uri = $node->field_image['und'][0]['uri'];
    $url_img = file_create_url($uri);  
    $vars['img_url'] = $url_img;

    $js_parallax = libraries_get_path('jquery.parallax') . '/jquery.parallax.min.js';
    drupal_add_js( $js_parallax , array('group' => JS_LIBRARY, 'weight' => 1));
  }

  $data['perPage'] = 8;

  // If an argument is present, cookie data need to by refreshed
  $data['withArgs'] = false;
  if (isset($_GET['country'])){
    $data['withArgs'] = true;
  }

  $data['scroll'] = false;
  if (isset($_GET['scroll'])){
    $data['scroll'] = true;
  }

  // Default filters
  $data['filters'] = array(
    'memb' => 'all',
  );

  // Archive id (for cookies)
  $data['id'] = 'directory';
  $data['scrollToElement'] = '#row-directory-archive';

  $show_sign_up = !user_is_logged_in();
  $vars['show_sign_up'] = $show_sign_up;

  $vars['content']['numbers'] = _tcbl_comps_directory_numbers();

  // Add comps archive
  $vars['content']['archive'] = array(
    '#theme' => 'tcbl_comps_main',
    '#content' => _tcbl_comps_build_archive($data['filters']),
    '#data' => $data,
    '#aid' => $data['id'],
  ); 
}

function _tcbl_comps_directory_numbers(){
  $build = false;

  $labs = _tcbl_comps_numbers('lab');
  if ($labs){
    $build['numbers']['lab'] = array(
      '#theme' => 'directory_number',
      '#number' => $labs,
      '#label' => 'Labs',
    );
  }

  $startups = _tcbl_comps_numbers('startups');
  if ($startups){
    $build['numbers']['startup'] = array(
      '#theme' => 'directory_number',
      '#number' => $startups,
      '#label' => 'Start-ups',
    );
  }

  $ass = _tcbl_comps_numbers('associates');
  if ($ass){
    $build['numbers']['ass'] = array(
      '#theme' => 'directory_number',
      '#number' => $ass,
      '#label' => 'Associates',
    );
  }

  return $build;
}

function _tcbl_comps_numbers($type){
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', array('company'));

  switch ($type) {
    case 'lab':
      $query->fieldCondition('field_ref_memb', 'tid', array(28));
      break;

    case 'associates':
      $query->fieldCondition('field_ref_memb', 'tid', array(60));
      break;

    case 'startups':
      $query->fieldCondition('field_ref_memb', 'tid', array(61));
      //$query->fieldCondition('field_cv_project', 'value', true);
      break;
    
    default:
      # code...
      break;
  }

  $query->execute();
  if (isset($query->ordered_results)){
    $results = $query->ordered_results;
    if ($type == 'startups'){
      dpm($results);
    }
    $tot = count($results);
    return $tot;
  }
  return false;  
}

function _tcbl_comps_pre_join_tcbl_lab(&$vars){
  $formNode = node_load(515);
  $build = node_view($formNode, 'default');
  $vars['content']['webform'] = $build['webform'];
}

/**
 * Build comps archive with map and list
 */
function _tcbl_comps_build_archive($filters){
  $data['list'] = false;
  
  // All nids for filters
  $all_nids = _tcbl_comps_query_nids($filters);

  // Filters
  $build['filters'] = _tcbl_comps_get_filters($all_nids);

  $build['map'] = array(
    '#theme' => 'tcbl_map',
    '#data' => $data,
    '#multiple' => true,
  );

  return $build;
}

// ** ----- UPDATING NODES -----
// -----------------------------

function tcbl_comps_node_presave($node){
  if ($node->type == 'company' || $node->type == 'project'){
    _tcbl_comps_update_owners($node);
  }
}

/**
 * Update the owners of the company and projects
 * @param  class   $node     : node object
 * @param  boolean $nodesave : force the node saving
 */
function _tcbl_comps_update_owners($node, $nodesave = false){
  if (isset($node->field_ref_user['und'][0]['target_id'])){
    $uid = $node->field_ref_user['und'][0]['target_id'];

    // Change the author of the company node
    $node->uid = $uid;

    // By default the node will be saved inside the hook
    if ($nodesave){
      node_save($node);
    }
    
    // Change the author of the projects
    // if (isset($node->field_ref_projects['und'][0])){
    //   $projects = $node->field_ref_projects['und'];
    //   foreach ($projects as $key => $item) {
    //     $nid = $item['target_id'];
    //     $project = node_load($nid);
    //     $project->uid = $uid;
    //     node_save($project);
    //   }
    // }
  }
}

/**
 * Usefull function to update all company owners
 * @return [type] [description]
 */
function _tcbl_comps_update_all_owners(){
  $nids = _tcbl_comps_load_all_comps();
  $nodes = node_load_multiple($nids);
  foreach ($nodes as $key => $node) {
    _tcbl_comps_update_owners($node, true);
    drupal_set_message($node->title . ' updated');  
  }
}

function _tcbl_comps_load_all_comps($tid = false){
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', array('company'));

  if ($tid){
    $query->fieldCondition('field_ref_memb', 'tid', array($tid));
  }

  $query->execute();
  if (isset($query->ordered_results)){
    $results = $query->ordered_results;
    $nids = [];
    foreach ( $results as $node ) {
      array_push($nids, $node->entity_id );
    }
   
    if (count($nids)){
      return $nids;
    }
  } else {
    return false;
  }
}

// ** DEV STUFF **
// ---------------

function tcbl_comps_dev(){
  
  // Only administrators
  global $user;
  if ($user->uid !== '1'){
    return array('#markup' => '<code>no access</code>');
  }

  $build['table'] = _tcbl_comps_dev_list_labs_user();

  // _tcbl_comps_dev_update_labs_fields();
  //$build['#markup'] = '<span>dev</span>';

  return $build;
}

function _tcbl_comps_dev_update_labs_fields(){
  $compNids = _tcbl_comps_load_all_comps(28);
  $comps = node_load_multiple($compNids);
  
  $edit = 0;
  foreach ($comps as $key => $comp) {
    if (isset($comp->field_ref_status)){
      // all approved
      $comp->field_ref_status['und'][0]['tid'] = '236';
      //$value = $comp->field_ref_status['und'][0]; //['value'] = true;
      $edit++;
      //node_save($comp);
    }
  }
}

function _tcbl_comps_dev_list_labs_user(){
  // Only associates
  $compNids = _tcbl_comps_load_all_comps(28); // 28 Lab
  $comps = node_load_multiple($compNids);

  $build['table'] = array(
    '#theme' => 'table',
    '#header' => array('N', 'Company name', 'Company manager', 'Public e-mail'),
  );

  $n = 1;
  foreach ($comps as $key => $comp) {

    $rows[$key]['n']['data']['#markup'] = $n;

    $rows[$key]['title']['data']['#markup'] = l($comp->title, 'node/' . $comp->nid);
    
    $rows[$key]['user']['data']['#markup'] = '--';
    if (isset($comp->field_ref_user['und'][0]['target_id'])){
      $uid = $comp->field_ref_user['und'][0]['target_id'];
      $tmp_user = user_load($uid);

      $rows[$key]['user']['data']['#markup'] = l($tmp_user->mail, 'user/' . $tmp_user->uid);
    }

    $rows[$key]['mail']['data']['#markup'] = '--';
    if (isset($comp->field_location['und'][0]['email']) && $comp->field_location['und'][0]['email'] !== ''){
      $mail = $comp->field_location['und'][0]['email'];
      $rows[$key]['mail']['data']['#markup'] = $mail;


      $parts = explode("@", $mail);
      $username = $parts[0];

      $ok_to_be_public = array(
        'info', 'lab', 'hello', 'contatti', 'contact',
      );

      if (!in_array($username, $ok_to_be_public)){
        $comp->field_location['und'][0]['email'] = '';
        // node_save($comp);
        
      }
    }

    $n++;
  }

  $build['table']['#rows'] = $rows;
  return $build;  
}

/**
 * Create user from public e-mails and set them as owners
 * @param  [type] $comps [description]
 * @return [type]        [description]
 */
function tcbl_comps_create_users_and_set_as_owners($comps){
  // 4 Non hanno l'email
  // quindi non avranno il riferimento
  $missing = 0;
  foreach ($comps as $nid => $comp) {
    if (isset($comp->field_location['und'][0]['email']) && $comp->field_location['und'][0]['email'] !== ''){
      $mail = $comp->field_location['und'][0]['email'];

      // Create or load an user
      $uid = tcbl_comps_create_user_by_mail($mail);

      if ($uid){
        $comp->field_ref_user['und'][0]['target_id'] = $uid;
        $comp->uid = $uid;
        node_save($comp);
        drupal_set_message('Company updated: ' . l($comp->title, 'node/' . $comp->nid));  
      }
    } else {
      $missing++;
    }
  }

  // 4 Missing on 18 06 2019
  dpm('Missing e-mails: ' . $missing);
}

/**
 * Create a user by e-mail and return the uid
 * if already exists, return the uid
 * @param  string $mail [description]
 * @return uid or false
 */
function tcbl_comps_create_user_by_mail($mail){
  // check if user exists
  $exists = user_load_by_mail($mail);
  if ($exists){
    drupal_set_message('Utente già esistente: ' . l($exists->name, 'user/' . $exists->uid));
    return $exists->uid;
  } else {

    // Create a temp username
    $parts = explode("@", $mail);
    $username = $parts[0];

    // Se l'utente esiste già
    $tmp_user = user_load_by_name($username);
    if ($tmp_user){
      $username = $username . '_' . rand(100, 999);
    }

    // Create user
    $new_user = array(
      'name' => $username,
      'pass' => 'WzU~$9n{px',
      'mail' => $mail,
      'status' => 1,
      'init' => $mail,
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user',
        8 => 'company-manager',
      ),
      'field_firstname' => array(LANGUAGE_NONE => array(array('value' => $username))),
    );

    // The first parameter is sent blank so a new user is created.
    $account = user_save('', $new_user);
    if ($account->uid) {
      drupal_set_message('Created new user: ' . l($username, 'user/' . $account->uid));
      return $account->uid;
    }
  }
  return false;
}

/**
 * Super fix for memory problem in ajax call (backend)
 */
function tcbl_comps_custom_theme() {
  global $user;
  if ($user->uid == 1){
    if (current_path() == 'system/ajax') {
      return variable_get('admin_theme');
    }  
  }
}