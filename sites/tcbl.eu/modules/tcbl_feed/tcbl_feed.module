<?php

require_once ("vendor/autoload.php");

/**
 * Implements hook_cron().
 */
function tcbl_feed_cron() {
  $default_interval = 3 * 60 * 60;//seconds
  if(!variable_get('tcbl_feed_cron_interval')) {
    variable_set('tcbl_feed_cron_interval', $default_interval);
  }
  $interval = variable_get('tcbl_feed_cron_interval', $default_interval);
  $last_exec = variable_get('tcbl_feed_cron_last_exec', 0);
  $now = time();

  if ($last_exec + $interval > $now) {
    watchdog('TCBL Feed', 'Cron - not yet!');
    return;
  }

  watchdog('TCBL Feed', 'Cron run: ' . $now);
  variable_set('tcbl_feed_cron_last_exec', $now);

  //--------------------------------------------FEED GENERATION
  $generate_feed_options = [
    "feed_item_per_plugin" => [
      "default" => 3,
      "tcbl_zine" => 4,
      "facebook" => 2,
      "instagram" => 2,
      "twitter" => 2,
    ]
  ];
  tcbl_feed_generate_feeds($generate_feed_options);
}

/**
 * @param array $getFeedOptions
 *
 * @returns array
 */
function tcbl_feed_get_renderable_feeds($getFeedOptions = []) {
  $answer = [];

  $feeds = \Mekit\TcblFeed\FeedFactory::getFeeds($getFeedOptions);

  if (count($feeds)) {
    //$answer['content'] = t('Number of feeds: ' . count($feeds));
    $answer['content'] = [];
    $answer['content']['feeds'] = [];

    /** @var \Mekit\TcblFeed\FeedItem $feed */
    foreach ($feeds as $feed) {
      $feedThemeItem = [
        '#theme' => 'tcbl_feed_item',
        '#feed_item' => $feed,
      ];
      array_push($answer['content']['feeds'], $feedThemeItem);
    }
  }

  return $answer;
}

/**
 * @param array $generateFeedOptions
 *
 * @todo: implement this with cron hook
 *
 */
function tcbl_feed_generate_feeds($generateFeedOptions = []) {
  try {
    \Mekit\TcblFeed\FeedFactory::generateFeeds($generateFeedOptions);
  } catch(\ReflectionException $e) {
    //bad stuff :-(
  }
}

/**
 * @param $vars
 */
function tcbl_feed_preprocess_tcbl_feed_item(&$vars) {
  /** @var \Mekit\TcblFeed\FeedItem $feedItem */
  $feedItem = $vars["feed_item"];

  // Theme hook suggestions
  $vars["theme_hook_suggestions"] = [];
  if($feedItem->isSocial()) {
    $vars["theme_hook_suggestions"][] = "tcbl_feed_item__social";
  }
  $vars["theme_hook_suggestions"][] = "tcbl_feed_item__" . $feedItem->getSource();
  $vars["theme_hook_suggestions"][] = "tcbl_feed_item__" . $feedItem->getSource() . '__' . $feedItem->getType();

  // Classes
  $classStub = "feed-item";
  $classes = [];
  $classes[] = $classStub;
  if($feedItem->isSocial()) {
    $classes[] = $classStub . "-social";
  }
  $classes[] = $classStub . "-" . str_replace("_", "-", $feedItem->getSource());
  $classes[] = $classStub . "-" . str_replace("_", "-", $feedItem->getType());
  $vars["classes_array"] = $classes;

  // Fontawesome icon
  $icons = ["fa"];
  switch($feedItem->getSource()) {
    case "facebook":
      $icons[] = "fa-facebook-f";
      break;
    case "instagram":
      $icons[] = "fa-instagram";
      break;
    case "twitter":
      $icons[] = "fa-twitter";
      break;
    default:
      $icons[] = "fa-rss";
      break;
  }
  $vars["fontawesome_icon"] = implode(" ", $icons);
}

/**
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 *
 * @return array
 */
function tcbl_feed_theme($existing, $type, $theme, $path) {
  return [
    'tcbl_feed_item' => [
      'template' => 'tcbl-feed-item',
      'variables' => [
        'feed_item' => NULL,
        /*'classes' => NULL,*/
        'fontawesome_icon' => NULL,
      ],
      'path' => drupal_get_path('module', 'tcbl_feed') . '/templates',
      /*'pattern' => 'tcbl-feed-item__',*/
    ],
  ];
}
